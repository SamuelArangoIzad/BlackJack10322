Samuel TestCards - GAME - COPY

package models;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import org.junit.Test;
public class CardTest {
 @Test
 public void testCardInitialization() {
 Card card = new Card(Card.Suit.HEARTS, Card.Rank.ACE);
 assertNotNull(card);
 assertEquals(Card.Suit.HEARTS, card.getSuit());
 assertEquals(Card.Rank.ACE, card.getRank());
 }
 @Test
 public void testCardToString() {
 Card card = new Card(Card.Suit.CLUBS, Card.Rank.FIVE);
 String expectedString = "FIVE CLUBS";
 String cardString = card.toString();
 assertEquals(expectedString, cardString);
 }
}
package models;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;
public class DeckTest {
 private Deck deck;
 @Before
 public void setUp() {
 deck = new Deck();
 }
 @Test
 public void testDeckInitialization() {
 assertNotNull(deck);
 }
 @Test
 public void testDeckSize() {
 assertEquals(52, deck.cards.size());
 }
 @Test
 public void testDrawCard() {
 Card drawnCard = deck.draw();
 assertNotNull(drawnCard);
 assertEquals(51, deck.cards.size());
 }
 @Test
 public void testShuffledDeck() {
 // Create a new deck
 Deck newDeck = new Deck();
 // Draw a card from the original deck
 Card originalCard = deck.draw();
 // Draw a card from the new deck
 Card newCard = newDeck.draw();
 // Verify that the decks are shuffled (i.e., cards are not in the same order)
 assertTrue(originalCard.getRank() != newCard.getRank() || originalCard.getSuit() != 
newCard.getSuit());
 }
}
package models;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import org.junit.Before;
import org.junit.Test;
public class GameTest {
 private Game game;
 @Before
 public void setUp() {
 game = new Game("Player1", 100);
 }
 @Test
 public void testGameInitialization() {
 assertNotNull(game);
 assertNotNull(game.getPlayer());
 assertNotNull(game.getDealer());
 assertNotNull(game.getDeck());
 }
 @Test
 public void testDealInitialCards() {
 game.dealInitialCards();
 Hand playerHand = game.getPlayer().getHand();
 Hand dealerHand = game.getDealer().getHand();
 assertEquals(2, playerHand.getCardCount());
 assertEquals(2, dealerHand.getCardCount());
 }
 @Test
 public void testHitPlayer() {
 game.dealInitialCards();
 int initialPlayerCardCount = game.getPlayer().getHand().getCardCount();
 game.hitPlayer();
 int updatedPlayerCardCount = game.getPlayer().getHand().getCardCount();
 assertEquals(initialPlayerCardCount + 1, updatedPlayerCardCount);
 }
 @Test
 public void testHitDealer() {
 game.dealInitialCards();
 int initialDealerCardCount = game.getDealer().getHand().getCardCount();
 game.hitDealer();
 int updatedDealerCardCount = game.getDealer().getHand().getCardCount();
 assertEquals(initialDealerCardCount + 1, updatedDealerCardCount);
 }
}
package models.
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;
public class HandTest {
 private Hand hand;
 @Before
 public void setUp() {
 hand = new Hand();
 }
 @Test
 public void testAddCard() {
 Card card = new Card(Card.Suit.HEARTS, Card.Rank.ACE);
 hand.addCard(card);
 assertEquals(1, hand.getCards().size());
 assertEquals(card, hand.getCards().get(0));
 }
 @Test
 public void testGetValue() {
 Card card1 = new Card(Card.Suit.HEARTS, Card.Rank.TWO);
 Card card2 = new Card(Card.Suit.CLUBS, Card.Rank.KING);
 hand.addCard(card1);
 hand.addCard(card2);
 assertEquals(12, hand.getValue());
 }
 @Test
 public void testIsBust() {
 Card card1 = new Card(Card.Suit.HEARTS, Card.Rank.KING);
 Card card2 = new Card(Card.Suit.CLUBS, Card.Rank.QUEEN);
 hand.addCard(card1);
 hand.addCard(card2);
 assertTrue(hand.isBust());
 // Reset hand and test non-bust scenario
 hand = new Hand();
 Card card3 = new Card(Card.Suit.HEARTS, Card.Rank.TWO);
 Card card4 = new Card(Card.Suit.CLUBS, Card.Rank.ACE);
 hand.addCard(card3);
 hand.addCard(card4);
 assertFalse(hand.isBust());
 }
 @Test
 public void testIsBlackjack() {
 Card card1 = new Card(Card.Suit.HEARTS, Card.Rank.ACE);
 Card card2 = new Card(Card.Suit.CLUBS, Card.Rank.KING);
 hand.addCard(card1);
 hand.addCard(card2);
 assertTrue(hand.isBlackjack());
 // Reset hand and test non-Blackjack scenario
 hand = new Hand();
 Card card3 = new Card(Card.Suit.HEARTS, Card.Rank.TWO);
 Card card4 = new Card(Card.Suit.CLUBS, Card.Rank.ACE);
 hand.addCard(card3);
 hand.addCard(card4);
 assertFalse(hand.isBlackjack());
 }
 @Test
 public void testToString() {
 Card card1 = new Card(Card.Suit.HEARTS, Card.Rank.ACE);
 Card card2 = new Card(Card.Suit.CLUBS, Card.Rank.TEN);
 hand.addCard(card1);
 hand.addCard(card2);
 String expectedString = "ACE HEARTS, TEN CLUBS";
 assertEquals(expectedString, hand.toString());
 }
}
package models;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import org.junit.Before;
import org.junit.Test;
public class PlayerTest {
 private Player player;
 @Before
 public void setUp() {
 player = new Player("Player1", 100);
 }
 @Test
 public void testPlayerInitialization() {
 assertNotNull(player);
 assertEquals("Player1", player.getName());
 assertEquals(100, player.getCoins());
 assertNotNull(player.getHand());
 }
 @Test
 public void testAddCoins() {
 player.addCoins(50);
 assertEquals(150, player.getCoins());
 }
 @Test
 public void testSubtractCoins() {
 player.subtractCoins(30);
 assertEquals(70, player.getCoins());
 }
 @Test
 public void testGetHand() {
 assertNotNull(player.getHand())
}
}